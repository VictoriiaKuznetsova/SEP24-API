{
	"info": {
		"_postman_id": "6f5f9755-01fa-4b87-8b46-9b8bbf826e91",
		"name": "ASK-Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31876766",
		"_collection_link": "https://lunar-flare-708518.postman.co/workspace/ASK-SEP24~ddae3613-572b-451e-8157-4af5d3e4137c/collection/31876766-6f5f9755-01fa-4b87-8b46-9b8bbf826e91?action=share&source=collection_link&creator=31876766"
	},
	"item": [
		{
			"name": "sign-in [T] Status 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"victorija.cuzneczowa2015@gmail.com\",\n  \"password\": \"12345k\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://ask-qa.portnov.com/api/v1/sign-in",
					"protocol": "http",
					"host": [
						"ask-qa",
						"portnov",
						"com"
					],
					"path": [
						"api",
						"v1",
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "sign-in [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response time is less than 2000 ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"pm.test(\"Verify user role = TEACHER\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"TEACHER\");",
							"});",
							"    ",
							"var jsonData = pm.response.json();",
							"      ",
							"",
							"pm.environment.set(\"TeacherToken\", jsonData.token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"victorija.cuzneczowa2015@gmail.com\",\n  \"password\": \"12345\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://ask-qa.portnov.com/api/v1/sign-in",
					"protocol": "http",
					"host": [
						"ask-qa",
						"portnov",
						"com"
					],
					"path": [
						"api",
						"v1",
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "sign-in [S] User into Application",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Verify user role = STUDENT\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"STUDENT\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"    var jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"StudentToken\", jsonData.user);",
							"pm.environment.set(\"StudentId\", jsonData.user.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "12345",
							"type": "string"
						},
						{
							"key": "username",
							"value": "victoija.cuzneczowa2015%40yahoo.com",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"victorija.cuzneczowa2015@yahoo.com\",\n  \"password\": \"12345\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/sign-in",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "quiz [T] Create New Quiz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"    var jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"quizId\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TeacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Demo Quiz Michael@86 06/10/24\",\n  \"totalScore\": 18,\n  \"passingPercentage\": 75,\n  \"showStopperQuestion\": 1,\n  \"questions\": [\n    {\n      \"type\": \"TEXTUAL\",\n      \"question\": \"What is your name?\",\n      \"score\": 5\n    },\n    {\n      \"type\": \"SINGLE_CHOICE\",\n      \"question\": \"Which city is city largest in California?\",\n      \"score\": 7,\n      \"answer\": 2,\n      \"hasOtherOption\": false,\n      \"options\": [\n        \"San Francisco\",\n        \"Sacramento\",\n        \"Los Angeles\",\n        \"Redding\"\n      ]\n    },\n    {\n      \"type\": \"MULTIPLE_CHOICE\",\n      \"question\": \"Who was apple founded by?\",\n      \"score\": 6,\n      \"answers\": [\n        0,\n        1,\n        2\n      ],\n      \"hasOtherOption\": true,\n      \"options\": [\n        \"Steve Jobs\",\n        \"Steve Wozniak\",\n        \"Ronald Wayne\",\n        \"Ronald Reagan\"\n      ]\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/quiz",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"quiz"
					]
				}
			},
			"response": []
		},
		{
			"name": "assignment [T] - Assignment to a Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"    var jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"assignmentId\", jsonData [0].id);",
							"pm.environment.set(\"assignmentGroupID\", jsonData [0].assignmentGroupID);",
							"",
							"pm.test(\"Verify quiz status, result, gradedBy before submition\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData [0].status).to.eql(ASSIGNED);",
							"    pm.expect(jsonData [0].status).to.eql(PENDING);",
							"    pm.expect(jsonData [0].status).to.eql(NONE);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TeacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"quizId\": {{quizId}},\n  \"userIds\": [{{StudentId}}]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/assignment",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"assignment"
					]
				}
			},
			"response": []
		},
		{
			"name": "submit-assignment [S] Submit Assignment's Result",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); }); pm.test(\"Verify status, result, and gradedBy after student's submission\", function () { var jsonData = pm.response.json(); pm.expect(jsonData[jsonData.length - 1].status).to.eql(\"GRADED\"); pm.expect(jsonData[jsonData.length - 1].result).to.eql(\"PASSED\"); pm.expect(jsonData[jsonData.length - 1].GradedBy).to.eql(\"AUTOMATIC\");",
							" });",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{StudentTokenDen}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n    \"assignmentId\":{{AssignmentId}}, \n    \"answers\": [\n         { \n            \"answer\": [0], \n            \"textAnswer\": \"Michael\" \n            }, \n            { \"answer\": [2], \n            \"textAnswer\": \"we\" },\n             { \"answer\": [0, 1], \n             \"textAnswer\": \"Steve Jobs and Steve Wozniak\" \n             } \n            ] \n         }\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/submit-assignment",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"submit-assignment"
					]
				}
			},
			"response": []
		},
		{
			"name": "assignment [T] Grades Assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Verify status, result and GradedBy after manual grading\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[jsonData.Length-1].status).to.eql(GRADED);",
							"",
							"pm.expect(jsonData[jsonData.Length-1].result).to.eql(PASSED);",
							"",
							"pm.expect(jsonData[jsonData.Length-1].gradedBy).to.eql(TEACHER);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TeacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"summary\": \"Summary from teacher\",\n  \"result\": \"PASSED\",\n  \"grades\": [\n    {\n      \"comment\": \"Teacher comment\",\n      \"additionalScore\": 5\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/assignment/{{AssignmentId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"assignment",
						"{{AssignmentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "quizzes [T] - List of quizzes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var myQuiz = pm.environment. get (\"quizId\");",
							"",
							"pm.test(\"Your test name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[jasonData.length-1].Id).to.eql(myQuiz);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TeacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/quizzes",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"quizzes"
					]
				}
			},
			"response": []
		},
		{
			"name": "quiz: id [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body matches string Quiz was deieted\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Quiz was deieted\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TeacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/quiz/{{quizId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"quiz",
						"{{quizId}}"
					]
				}
			},
			"response": []
		}
	]
}